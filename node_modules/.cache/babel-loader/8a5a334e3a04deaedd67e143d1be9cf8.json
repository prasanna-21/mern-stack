{"ast":null,"code":"import { ADD_POST, GET_POSTS, GET_POST, POST_DELETE, POST_ERROR, UPDATE_LIKE, ADD_COMMENT } from '../actions/types';\nconst initialState = {\n  posts: [],\n  post: null,\n  loading: true,\n  errors: {}\n};\n\nconst post = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case GET_POSTS:\n      return { ...state,\n        posts: payload,\n        loading: false\n      };\n\n    case GET_POST:\n      return { ...state,\n        post: payload,\n        loading: false\n      };\n\n    case ADD_POST:\n      return { ...state,\n        posts: [...state.posts, payload],\n        loading: false\n      };\n\n    case ADD_COMMENT:\n      return { ...state,\n        post: { ...state.post,\n          comments: payload\n        }\n      };\n\n    case UPDATE_LIKE:\n      return { ...state,\n        posts: state.posts.map(post => post._id === payload.id ? { ...post,\n          likes: payload.likes\n        } : post),\n        loading: false\n      };\n\n    case POST_DELETE:\n      return { ...state,\n        posts: state.posts.map(post => post._id !== payload.id),\n        loading: false\n      };\n\n    case POST_ERROR:\n      return { ...state,\n        errors: payload,\n        loading: false\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default post;","map":{"version":3,"sources":["D:/udemy-mern/server/client/src/reducers/post.js"],"names":["ADD_POST","GET_POSTS","GET_POST","POST_DELETE","POST_ERROR","UPDATE_LIKE","ADD_COMMENT","initialState","posts","post","loading","errors","state","action","type","payload","comments","map","_id","id","likes"],"mappings":"AAAA,SAAQA,QAAR,EAAkBC,SAAlB,EAA4BC,QAA5B,EAAqCC,WAArC,EAAiDC,UAAjD,EAA4DC,WAA5D,EAAwEC,WAAxE,QAA0F,kBAA1F;AACA,MAAMC,YAAY,GAAC;AACfC,EAAAA,KAAK,EAAC,EADS;AAEfC,EAAAA,IAAI,EAAC,IAFU;AAGfC,EAAAA,OAAO,EAAC,IAHO;AAIfC,EAAAA,MAAM,EAAC;AAJQ,CAAnB;;AAMA,MAAMF,IAAI,GAAC,YAA6B;AAAA,MAA5BG,KAA4B,uEAAtBL,YAAsB;AAAA,MAATM,MAAS;AACpC,QAAM;AAACC,IAAAA,IAAD;AAAMC,IAAAA;AAAN,MAAeF,MAArB;;AACA,UAAOC,IAAP;AACI,SAAKb,SAAL;AACI,aAAO,EAAC,GAAGW,KAAJ;AAAUJ,QAAAA,KAAK,EAACO,OAAhB;AAAwBL,QAAAA,OAAO,EAAC;AAAhC,OAAP;;AACJ,SAAKR,QAAL;AACI,aAAO,EAAC,GAAGU,KAAJ;AAAUH,QAAAA,IAAI,EAACM,OAAf;AAAuBL,QAAAA,OAAO,EAAC;AAA/B,OAAP;;AACJ,SAAKV,QAAL;AACI,aAAO,EAAC,GAAGY,KAAJ;AAAUJ,QAAAA,KAAK,EAAC,CAAC,GAAGI,KAAK,CAACJ,KAAV,EAAgBO,OAAhB,CAAhB;AAAyCL,QAAAA,OAAO,EAAC;AAAjD,OAAP;;AACJ,SAAKJ,WAAL;AACI,aAAO,EAAC,GAAGM,KAAJ;AAAUH,QAAAA,IAAI,EAAC,EAAC,GAAGG,KAAK,CAACH,IAAV;AAAeO,UAAAA,QAAQ,EAACD;AAAxB;AAAf,OAAP;;AACJ,SAAKV,WAAL;AACI,aAAO,EAAC,GAAGO,KAAJ;AAAUJ,QAAAA,KAAK,EAACI,KAAK,CAACJ,KAAN,CAAYS,GAAZ,CAAgBR,IAAI,IAAEA,IAAI,CAACS,GAAL,KAAWH,OAAO,CAACI,EAAnB,GAAyB,EAAC,GAAGV,IAAJ;AAASW,UAAAA,KAAK,EAACL,OAAO,CAACK;AAAvB,SAAzB,GAAwDX,IAA9E,CAAhB;AAAoGC,QAAAA,OAAO,EAAC;AAA5G,OAAP;;AACJ,SAAKP,WAAL;AACI,aAAO,EAAC,GAAGS,KAAJ;AAAUJ,QAAAA,KAAK,EAACI,KAAK,CAACJ,KAAN,CAAYS,GAAZ,CAAgBR,IAAI,IAAEA,IAAI,CAACS,GAAL,KAAWH,OAAO,CAACI,EAAzC,CAAhB;AAA6DT,QAAAA,OAAO,EAAC;AAArE,OAAP;;AACJ,SAAKN,UAAL;AACI,aAAO,EAAC,GAAGQ,KAAJ;AAAUD,QAAAA,MAAM,EAACI,OAAjB;AAAyBL,QAAAA,OAAO,EAAC;AAAjC,OAAP;;AACJ;AACI,aAAOE,KAAP;AAhBR;AAmBH,CArBD;;AAsBA,eAAeH,IAAf","sourcesContent":["import {ADD_POST, GET_POSTS,GET_POST,POST_DELETE,POST_ERROR,UPDATE_LIKE,ADD_COMMENT} from '../actions/types';\r\nconst initialState={\r\n    posts:[],\r\n    post:null,\r\n    loading:true,\r\n    errors:{}\r\n}\r\nconst post=(state=initialState,action)=>{\r\n    const {type,payload}=action;\r\n    switch(type){\r\n        case GET_POSTS:\r\n            return {...state,posts:payload,loading:false};\r\n        case GET_POST:\r\n            return {...state,post:payload,loading:false}\r\n        case ADD_POST:\r\n            return {...state,posts:[...state.posts,payload],loading:false};\r\n        case ADD_COMMENT:\r\n            return {...state,post:{...state.post,comments:payload}}\r\n        case UPDATE_LIKE:\r\n            return {...state,posts:state.posts.map(post=>post._id===payload.id ? ({...post,likes:payload.likes}):post),loading:false};\r\n        case POST_DELETE:\r\n            return {...state,posts:state.posts.map(post=>post._id!==payload.id),loading:false};\r\n        case POST_ERROR:\r\n            return {...state,errors:payload,loading:false};\r\n        default :\r\n            return state;\r\n    }\r\n\r\n}\r\nexport default post;"]},"metadata":{},"sourceType":"module"}